{"pages":[],"posts":[{"title":"安卓微信链接自动打开默认浏览器","text":"查看demo=&gt; github 安卓微信链接自动打开默认浏览器请使用andorid微信扫码体验 实现方案1.根据 user-agent 判断当前链接在安卓微信环境,增加响应头，设置状态码为 206 安卓微信就会自动打开默认浏览器 1&quot;Content-Disposition&quot;: &quot;attachment;filename=river.apk&quot; Response Headers 如下 123456HTTP/1.1 206 Partial ContentContent-Disposition: attachment;filename=river.apkContent-Type: text/plain; charset=utf-8Content-Length: 0Date: Sun, 01 Sep 2019 14:54:31 GMTConnection: keep-alive 微信自动打开默认浏览器,会重新请求链接我们判断一下 user-agent,我们就可以根据做我们需要的操作了 参考文档Content-Disposition","link":"/2019/09/02/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%8D%93%E5%BE%AE%E4%BF%A1%E9%93%BE%E6%8E%A5%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"title":"动态渲染element-ui表格像iview一样","text":"由于代码还是比较简单的 能力强的同学直接看demo就行了 [demo传送](https://github.com/gexin1/dynamic-render-element-table) 使用到了渲染函数o(╥﹏╥)o 不了解的同学可以去官网看下=>[传送门](https://cn.vuejs.org/v2/guide/render-function.html) 头好大啊o(╥﹏╥)o 我们仿照iview 表格的写法 通过传入一个render函数来渲染自定义列 我通过函数自定义组件来合并传入的自定义列 ### 自定义加强的column 12345678910111213141516171819202122232425262728//ColumnPlus.vue&lt;script&gt;/** * 动态渲染 el-table-column */export default { name: 'ColumnPlus', props: { attrs: { type: Object, default: () =&gt; ({}), required: true } }, render: function(h) { let attrs = this.attrs; let scopedSlots = {}; // 如果传入render 就表示需要自定义列 我们把渲染函数加入插槽里边 if (attrs.render) { scopedSlots.default = scope =&gt; attrs.render(h, scope); } return h('el-table-column', { attrs, scopedSlots }); }};&lt;/script&gt; 我们赶快来动态构造table吧 ### table 动态渲染 1234567891011121314151617181920212223242526272829303132333435363738394041424344//table.vue&lt;template&gt; &lt;el-table :data=&quot;data&quot; v-bind=&quot;attrs&quot; v-on=&quot;event&quot;&gt; &lt;column-plus v-for=&quot;(item, index) in columns&quot; :key=&quot;index&quot; :attrs=&quot;item&quot; &gt;&lt;/column-plus&gt; &lt;/el-table&gt;&lt;/template&gt;&lt;script&gt;import ColumnPlus from './ColumnPlus';export default { props: { data: { type: Array, required: true }, columns: { type: Array, required: true }, attrs: { type: Object, default: () =&gt; ({}) }, event: { type: Object, default: () =&gt; ({}) } }, computed: { _attrs() { //默认table 参数 const defaultParams = {}; return Object.assign(this.attrs, defaultParams); } }, components: { ColumnPlus }};&lt;/script&gt; 终于完成了-_-|| ### 使用组件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;template&gt; &lt;div class=&quot;app&quot;&gt; &lt;dynamic-table :columns=&quot;columns2&quot; :data=&quot;data&quot; :attrs=&quot;tableAttr&quot; :event=&quot;tableEvent&quot; &gt;&lt;/dynamic-table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import DynamicTable from &quot;./components/DynamicTable&quot;;export default { name: &quot;App&quot;, data() { return { //table tableAttr: { height: `400px`, stripe: false, border: true, fit: true }, tableEvent: { &quot;selection-change&quot;: val =&gt; { console.log(val); } }, columns2: [ { type: &quot;selection&quot;, width: &quot;55&quot; }, { label: &quot;Address&quot;, prop: &quot;address&quot;, width: 300 }, { label: &quot;Postcode&quot;, prop: &quot;zip&quot;, width: 200, sortable: true, &quot;sort-method&quot;: function(a, b) { return b.zip - a.zip; } }, { label: &quot;Action&quot;, fixed: &quot;right&quot;, width: &quot;300&quot;, render: (h, params) =&gt; { return h(&quot;div&quot;, [ h( &quot;el-button&quot;, { props: { type: &quot;primary&quot;, size: &quot;mini&quot; }, on: { click() { console.log(params); } } }, &quot;查看&quot; ) ]); } } ], data: [ { name: &quot;John Brown&quot;, age: 18, address: &quot;New York No. 1 Lake Park&quot;, province: &quot;America&quot;, city: &quot;New York&quot;, zip: 100010 } ] }; }, components: { DynamicTable }};&lt;/script&gt; 是不是很简单呢^_^ [demo传送](https://github.com/gexin1/dynamic-render-element-table)","link":"/2019/07/05/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93element-ui%E8%A1%A8%E6%A0%BC%E5%83%8Fiview%E4%B8%80%E6%A0%B7/"},{"title":"支持es-module-package","text":"highlight: a11y-light由于社区许多npm包采用esm(es module)写之后 项目需要兼容esm和cjs(commonjs) 两种包结构 使用@nest/cli的创建的nestjs项目会使用webpack-node-externals将node_modules包排出转换cjs引入打包之后会转换成这样 1module.exports = require(&quot;@nestjs/common&quot;); esm 的包也会转换为 1module.exports = require(&quot;parse-json&quot;); 我们需要把esm的包转换为cjs才能使用 我们直接把esm打包文件里转换为cjs就可以使用了直接覆盖nestjs的默认webpack配置文件// webpack.config.js 1234567891011const nodeExternals = require('webpack-node-externals');module.exports = function (options, webpack) { return {...options, externals: [ nodeExternals({ allowlist: [/^parse-json/i], }), ],}","link":"/2022/03/16/%E5%89%8D%E7%AB%AF/%E6%94%AF%E6%8C%81es-module-package/"},{"title":"http请求https报错","text":"axios http 请求 https报错","link":"/2022/03/16/%E5%89%8D%E7%AB%AF/http%E8%AF%B7%E6%B1%82https%E6%8A%A5%E9%94%99/"}],"tags":[{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"axios","slug":"axios","link":"/tags/axios/"},{"name":"wechat","slug":"wechat","link":"/tags/wechat/"},{"name":"nest","slug":"nest","link":"/tags/nest/"},{"name":"nestjs","slug":"nestjs","link":"/tags/nestjs/"}],"categories":[{"name":"wechat","slug":"wechat","link":"/categories/wechat/"},{"name":"vue","slug":"vue","link":"/categories/vue/"},{"name":"axios","slug":"axios","link":"/categories/axios/"},{"name":"nest","slug":"nest","link":"/categories/nest/"},{"name":"nestjs","slug":"nest/nestjs","link":"/categories/nest/nestjs/"}]}